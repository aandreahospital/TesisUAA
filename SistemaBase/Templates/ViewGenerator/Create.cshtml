﻿
@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@@model @Model.ViewDataTypeName

@{
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
    @:@@{
    @:ViewData["Title"] = "@Model.ViewName";
         //if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        //{
        //    @:Layout = "@Model.LayoutPageFile";
        //}
    @:Layout = "";
    @: string namecheck = "";
    @:}
    @*@:<h1>@Model.ViewName</h1>*@
    @:
    }
    else
    {
    @:@@{
    @:Layout = null;
    @:}
    @:
    @:<!DOCTYPE html>
    @:
    @:<html>
    @:<head>
    @:<meta name="viewport" content="width=device-width" />
    @* @:<title>@Model.ViewName</title>*@
    @:</head>
    @:<body>
    @:
            //    PushIndent("    ");
        }

 @:<div class="modal fade " id="detailsModal" tabindex="-1" aria-labelledby="detailsModallLabel" style="display: none;" aria-modal="true" role="dialog">

     @:<div class="modal-dialog modal-dialog-centered">
         @:<div class="modal-content">
             @:<div class="modal-header">
                 @:<h5 class="modal-title" id="detailsModalLabel">@Model.ViewDataTypeShortName</h5>
                 @:<button class="btn p-1" type="button"  data-bs-dismiss="modal" aria-label="Close" id="editmodal" ><svg class="svg-inline--fa fa-xmark fs--1" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="xmark" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512" data-fa-i2svg=""><path fill="currentColor" d="M310.6 361.4c12.5 12.5 12.5 32.75 0 45.25C304.4 412.9 296.2 416 288 416s-16.38-3.125-22.62-9.375L160 301.3L54.63 406.6C48.38 412.9 40.19 416 32 416S15.63 412.9 9.375 406.6c-12.5-12.5-12.5-32.75 0-45.25l105.4-105.4L9.375 150.6c-12.5-12.5-12.5-32.75 0-45.25s32.75-12.5 45.25 0L160 210.8l105.4-105.4c12.5-12.5 32.75-12.5 45.25 0s12.5 32.75 0 45.25l-105.4 105.4L310.6 361.4z"></path></svg><!-- <span class="fas fa-times fs--1"></span> Font Awesome fontawesome.com --></button>
             @:</div>
             @:<div class="modal-body">

        string formId = Model.ViewDataTypeShortName + "Form";
    @:<form asp-action="@Model.ViewName" id="FormModalCreate" onsubmit="submitforms(event,'Create', 'FormModalCreate')" class="mb-0">
    <div class="row g-0 mt-0 mb-0">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    @foreach (var property in Model.ModelMetadata.Properties)
                {
                    if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly)
                    {
                        if (property.IsForeignKey)
                        {
                                @:<div class="col-12">
                                    @:<div class="row">
                                        @:<div class="col-4">
                                            @:<label asp-for="@property.PropertyName" class="form-control-label fs-0 subTitleModal "></label>
                                        @:</div>

                                        @:<div class="col-8">
                                            @:<div class="form-check fromCheckSelect">
                                                @:<div style="max-width: 350px;">
                                                    @:<select asp-for="@property.PropertyName" asp-items="ViewBag.@property.PropertyName" class="form-select ps-4" data-choices="data-choices" data-options='{"removeItemButton":true,"placeholder":true}'>
                                                    @:</select>
                                                    @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
                                                @:</div>
                                            @:</div>
                                        @:</div>
                                    @:</div>
                                @:</div>





                            continue;
                        }

                        if (IsCheckbox(property))
                        {

                                @:<div class="col-12">
                                    @:<div class="row">
                                        @:<div class="col-4">
                                            @:<h5 class="mb-3 text-1000">Attributes</h5>
                                        @:</div>

                                        @:<div class="col-8">
                                            @:<div class="tab-pane fade" id="attributesTabContent" role="tabpanel" aria-labelledby="attributesTab">
                                                @:<div class="form-check fromCheckSelect">
                                                    @*@:@@Html.Kendo().CheckBoxFor(m => m.@property.PropertyName)*@
                                                    @:<input class="form-check my_checkbox" type="checkbox" asp-for="@property.PropertyName"  />
                                                    @:<label class="form-check-label text-900 fs-0" asp-for="@property.PropertyName"></label>
                                                @:</div>
                                            @:</div>
                                        @:</div>
                                    @:</div>
                                @:</div>


                        }
                        else if (IsDate(property))
                        {
                               @:<div class="col-12">
                                    @:<div class="row">
                                        @:<div class="col-4">
                                            @:<label class="form-check-label text-900 fs-0" asp-for="@property.PropertyName"></label>
                                        @:</div>

                                        @:<div class="col-8">
                                            @:<div class="form-control fromCheckSelect">
                                                @:<input class="form-control  datetimepicker" asp-for="@property.PropertyName" type="text" style="max-width: 350px;" placeholder="d/m/y" data-options='{"disableMobile":true}' />
                                            @:</div>
                                        @:</div>
                                    @:</div>
                                @:</div>
                        }
                        else if (IsNumericType(property))
                        {


                                @:<div class="col-12">
                                    @:<div class="row">
                                        @:<div class="col-4">
                                            @:<label class="form-control-label fs-0 subTitleModal " asp-for="@property.PropertyName"></label>
                                        @:</div>

                                        @:<div class="col-8">
                                           @* @:<div class="form-control">*@
                                                @:<input class="form-control" asp-for="@property.PropertyName" type="number" />
                                                @:<span asp-validation-for="@property.PropertyName" class="text-danger k-invalid-msg" data-for="@property.PropertyName"></span>
                                            @*@:</div>*@
                                        @:</div>
                                    @:</div>
                                @:</div>
                        }
                        else if (IsSelect(property))
                        {
                                @:<div class="col-12">
                                    @:<div class="row">
                                        @:<div class="col-4">
                                            @:<label class="form-control-label fs-0 subTitleModal " asp-for="@property.PropertyName"></label>
                                        @:</div>

                                        @:<div class="col-8">
                                            @:<div class="form-control fromCheckSelect">
                                                @:<select class="form-select ps-4" data-choices="data-choices" data-options='{"removeItemButton":true,"placeholder":true}' asp-for="@property.PropertyName"></select>
                                                @:<span asp-validation-for="@property.PropertyName" class="text-danger k-invalid-msg" data-for="@property.PropertyName"></span>
                                            @:</div>
                                        @:</div>
                                    @:</div>
                                @:</div>
                        }
                        else if (property.IsMultilineText)
                        {
                                @:<div class="col-12">
                                    @:<div class="form-control">
                                        @:<label class="form-control-label fs-0 subTitleModal " asp-for="@property.PropertyName"></label>
                                        @:<textarea class="tinymce" asp-for="@property.PropertyName" data-tinymce='{"height":"15rem","placeholder":"Write a description here..."}'></textarea>
                                        @:<span asp-validation-for="@property.PropertyName" class="text-danger k-invalid-msg" data-for="@property.PropertyName"></span>
                                    @:</div>
                                @:</div>


                        }
                        else
                        {

                                @:<div class="col-12">
                                    @:<div class="row">
                                        @:<div class="col-4">
                                            @:<label class="form-control-label fs-0 subTitleModal " asp-for="@property.PropertyName"></label>
                                        @:</div>

                                        @:<div class="col-8">
                    @*@:<div class="form-control">*@
                    if(@property.PropertyName?.Contains("Puede")){


                             <input class="form-control" hidden asp-for="@property.PropertyName" id="@property.PropertyName"  value="N"/>
                        @:<div class="form-check fromCheckSelect">
                        @:@@{ namecheck = "@property.PropertyName" + "_2";}
                        @:<input class="form-check my_checkbox" type="checkbox" id="@@namecheck" onchange="verifyCheckbox('@property.PropertyName')" />
                          @:</div>
                    }
                    else
                    {
                       @:<input class="form-control" asp-for="@property.PropertyName" />

                    }
                                                @:<span asp-validation-for="@property.PropertyName" class="text-danger k-invalid-msg" data-for="@property.PropertyName"></span>
                                            @*@:</div>*@
                                        @:</div>
                                    @:</div>
                                @:</div>
                        }
                    }
                    // Ideally we shouldn't be here  but if the user marks the foreign key as [ScaffoldColumn(false)], we want to atleast try to make it work.
                    else if (property.IsForeignKey)
                    { @:<div class="col-auto">
                                @:<div class="">
                                    @:<input type="hidden" asp-for="@property.PropertyName" />
                                @:</div>
                            @:</div>
                        continue;
            }
            else
            { @:<div class="col-auto">
                                @:<div class="">
                                    @:<input type="hidden" asp-for="@property.PropertyName" />
                                @:</div>
                            @:</div>
                        continue;
                
            }
        }

                 <div class="text-center" id="loader_inv" style="visibility: hidden;">
                            <div class="spinner-border" role="status">
                                <span class="sr-only"></span>
                            </div>
             </div>

    </div>


}


         


            <div class="modal-footer">
                <button class="btnAbm" type="submit">
                    <span class="btn-label"><i class="fa fa-save"></i></span> Guardar
                </button>

                <button class="btnAbmCancelar" type="button" data-bs-dismiss="modal">
                    <span class="btn-label"><i class="fa fa-remove"></i></span> Cancelar
                </button>
            </div>



            </form>






</div>
        </div>
    </div>
</div>

@{
    if (Model.ReferenceScriptLibraries)
    {
    //    @:<script>
    //@:$(document).ready(function () {
    //@:$("#@formId").kendoValidator({
    //@:// You can define your custom rules here:
    //@://rules: {}
    //@:});
    //@:})
    //@:</script>
    }
    // The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
    if (!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
    @:</body>
    @:</html>
}
}
@functions
    {
    // Do we need to use this in conjunction with the PrimaryKey check?
    bool IsPropertyGuid(IPropertyMetadata property)
    {
        return string.Equals("System.Guid", property.TypeName, StringComparison.OrdinalIgnoreCase);
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }

    bool IsNumericType(IPropertyMetadata property)
    {
        var types = new[] {
                    "System.Byte",
                    "System.SByte",
                    "System.UInt16",
                    "System.UInt32",
                    "System.UInt64",
                    "System.Int16",
                    "System.Int32",
                    "System.Int64",
                    "System.Decimal",
                    "System.Double",
                    "System.Single"
                };

        return types.Any(property.TypeName.Contains);
    }

    bool IsCheckbox(IPropertyMetadata p) => p.TypeName.Contains("System.Boolean");
    bool IsSelect(IPropertyMetadata p) => p.IsEnum && !p.IsEnumFlags;
    bool IsDate(IPropertyMetadata p) => p.TypeName.Contains("System.DateTime");
}