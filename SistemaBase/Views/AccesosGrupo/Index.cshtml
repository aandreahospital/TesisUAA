@model IEnumerable<SistemaBase.ModelsCustom.AccesosGrupoCustom>

@{
    List<string> columns = new List<string>();
    columns.Add("\"" + Html.DisplayNameFor(model => model.CodGrupo) + "\"");
    columns.Add("\"" + Html.DisplayNameFor(model => model.CodModulo) + "\"");
    columns.Add("\"" + Html.DisplayNameFor(model => model.NomForma) + "\"");
    columns.Add("\"" + Html.DisplayNameFor(model => model.Descripcion) + "\"");
    if (ViewData["Show"] != null)
    {
        Layout = "";
    }
}
@{
    ViewData["Title"] = "Index";
    int currentPage = ViewBag.Page;
    int maxPage = ViewBag.MaxPage;
}
@section styles {
    <link rel="stylesheet" type="text/css" href="./css/cdn.datatables.net_1.13.6_css_jquery.dataTables.min.css">
    <link rel="stylesheet" type="text/css" href="./css/cdn.jsdelivr.net_npm_sweetalert2@7.12.15_dist_sweetalert2.min.css">

}

@if (ViewData["Show"] == null)
{
    <script src="~/js/cdnjs.cloudflare.com_ajax_libs_moment.js_2.29.4_moment.min.js"></script>
    <script src="~/js/cdnjs.cloudflare.com_ajax_libs_sweetalert_2.1.2_sweetalert.min.js"></script>
    <script src="~/js/jquery-3.6.0.min.js"></script>
    <p>
        <a class="d-none" id="detailsview" type="button" data-bs-toggle="modal" data-bs-target="#detailsModal"></a>
    </p>
    <div class="mx-n4 px-4 mx-lg-n6 px-lg-6 bg-white pt-7 border-y border-300">
        <div data-list='{"valueNames":[@string.Join(",", columns) ],"page":50}'>
            <div class="row align-items-end justify-content-between pb-5 g-3">
                <div class="col-auto">
                    <h3>
                        Accesos Grupos de las Formas
                    </h3>

                    <button class="btnAbm mt-3" onclick="modalcreate()">
                        <span class="btn-label"><i class="fa fa-plus"></i></span> Nuevo
                    </button>
                   @* <button class="btnAbmOutline mt-3" onclick="exportDocument()" id="dowload-button">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-file-earmark-pdf" viewBox="0 0 16 16">
                            <path d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5v2z" />
                            <path d="M4.603 14.087a.81.81 0 0 1-.438-.42c-.195-.388-.13-.776.08-1.102.198-.307.526-.568.897-.787a7.68 7.68 0 0 1 1.482-.645 19.697 19.697 0 0 0 1.062-2.227 7.269 7.269 0 0 1-.43-1.295c-.086-.4-.119-.796-.046-1.136.075-.354.274-.672.65-.823.192-.077.4-.12.602-.077a.7.7 0 0 1 .477.365c.088.164.12.356.127.538.007.188-.012.396-.047.614-.084.51-.27 1.134-.52 1.794a10.954 10.954 0 0 0 .98 1.686 5.753 5.753 0 0 1 1.334.05c.364.066.734.195.96.465.12.144.193.32.2.518.007.192-.047.382-.138.563a1.04 1.04 0 0 1-.354.416.856.856 0 0 1-.51.138c-.331-.014-.654-.196-.933-.417a5.712 5.712 0 0 1-.911-.95 11.651 11.651 0 0 0-1.997.406 11.307 11.307 0 0 1-1.02 1.51c-.292.35-.609.656-.927.787a.793.793 0 0 1-.58.029zm1.379-1.901c-.166.076-.32.156-.459.238-.328.194-.541.383-.647.547-.094.145-.096.25-.04.361.01.022.02.036.026.044a.266.266 0 0 0 .035-.012c.137-.056.355-.235.635-.572a8.18 8.18 0 0 0 .45-.606zm1.64-1.33a12.71 12.71 0 0 1 1.01-.193 11.744 11.744 0 0 1-.51-.858 20.801 20.801 0 0 1-.5 1.05zm2.446.45c.15.163.296.3.435.41.24.19.407.253.498.256a.107.107 0 0 0 .07-.015.307.307 0 0 0 .094-.125.436.436 0 0 0 .059-.2.095.095 0 0 0-.026-.063c-.052-.062-.2-.152-.518-.209a3.876 3.876 0 0 0-.612-.053zM8.078 7.8a6.7 6.7 0 0 0 .2-.828c.031-.188.043-.343.038-.465a.613.613 0 0 0-.032-.198.517.517 0 0 0-.145.04c-.087.035-.158.106-.196.283-.04.192-.03.469.046.822.024.111.054.227.09.346z" />
                        </svg>
                        Exportar
                    </button>*@
                </div>


                <div class="col-12 col-md-auto">
                    <div class="row g-2 gy-3">
                        <div class="col-auto flex-1">
                            <div class="search-box">
                                <form class="position-relative" data-bs-toggle="search" data-bs-display="static">
                                    <input id="searchInput" class="form-control search-input search form-control-sm" type="search" placeholder="Buscar" aria-label="Search" />
                                    <span class="fas fa-search search-box-icon"></span>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="listbody">
                <div class="table-responsive mx-n1 px-1Latest">
                    <table class="table table-striped table-bordered">
                        <thead>
                            <tr>
                                <th class="white-space-nowrap fs--1 ps-0 align-middle text-center col-1 pt-2 pb-2 pl-2"></th>
                                <th class="sort align-middle ps-3 white-space-nowrap fs--1 ps-0  text-center col-2 p-0" data-sort="@Html.DisplayNameFor(model => model.CodGrupo))">Cod.Grupo</th>
                                <th class="sort align-middle ps-3 white-space-nowrap fs--1 ps-0  text-center col-2 p-0" data-sort="@Html.DisplayNameFor(model => model.CodModulo))">Cod.Módulo</th>
                                <th class="sort align-middle ps-3 white-space-nowrap fs--1 ps-0  text-center col-3 p-0" data-sort="@Html.DisplayNameFor(model => model.NomForma))">Forma</th>
                                <th class="sort align-middle ps-3 white-space-nowrap fs--1 ps-0  text-center col-4 p-0" data-sort="@Html.DisplayNameFor(model => model.NomForma))">Descripción</th>

                            </tr>
                        </thead>
                        <tbody class="list">
                            @foreach (var item in Model)
                            {
                                <tr class="hover-actions-trigger btn-reveal-trigger position-static">
                                    <td class="fs--1 align-middle ps-0 text-center col-1 pt-2 pb-2 pl-2">
                                        <button class="btnAbm" onclick="modaledit('@item.CodGrupo', '@item.CodModulo', '@item.NomForma')"><i class="fa fa-pencil"></i></button>
                                        <button class="btnAbm" onclick="modaldelete('@item.CodGrupo', '@item.CodModulo', '@item.NomForma')"><i class="fa fa-trash"></i></button>
                                    </td>
                                    <td class="@Html.DisplayNameFor(modelItem => item.CodGrupo) fs--1 align-middle ps-0 text-left col-2 pt-2 pb-2 ps-2"> @Html.DisplayFor(modelItem => item.CodGrupo)</td>
                                    <td class="@Html.DisplayNameFor(modelItem => item.CodModulo) fs--1 align-middle ps-0 text-left col-2 pt-2 pb-2 ps-2"> @Html.DisplayFor(modelItem => item.CodModulo)</td>
                                    <td class="@Html.DisplayNameFor(modelItem => item.NomForma) fs--1 align-middle ps-0 text-left col-3 pt-2 pb-2 ps-2"> @Html.DisplayFor(modelItem => item.NomForma)</td>
                                    <td class="@Html.DisplayNameFor(modelItem => item.NomForma) fs--1 align-middle ps-0 text-left col-4 pt-2 pb-2 ps-2"> @Html.DisplayFor(modelItem => item.Descripcion)</td>

                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="row align-items-center py-1">
                <div class="pagination d-none"></div>
                <div class="col d-flex fs--1">
                    <p class="mb-0 d-none d-sm-block me-3 fw-semi-bold text-900" data-list-info="data-list-info"></p><a class="fw-semi-bold" href="#!" data-list-view="*">Ver Todos<span class="fas fa-angle-right ms-1" data-fa-transform="down-1"></span></a><a class="fw-semi-bold d-none" href="#!" data-list-view="less">Ver menos</a>
                </div>
                <div class="pagination d-flex justify-content-center">
                    @if (ViewBag.Page > 1)
                    {
                        <a class="btn btn-link" href="@Url.Action("Index", new { page = ViewBag.Page - 1, searchTerm = ViewContext.HttpContext.Request.Query["searchTerm"] })">Anterior</a>
                    }

                    @if (ViewBag.MaxPage <= 7)
                    {
                        for (int i = 1; i <= ViewBag.MaxPage; i++)
                        {
                            <a class="btn btn-link @((ViewBag.Page == i) ? "active" : "")" href="@Url.Action("Index", new { page = i })">@i</a>
                        }
                    }
                    else
                    {
                        @if (ViewBag.Page < 3)
                        {
                            for (int i = 1; i <= 7; i++)
                            {
                                <a class="btn btn-link @((ViewBag.Page == i) ? "active" : "")" href="@Url.Action("Index", new { page = i })">@i</a>
                            }
                            <span>...</span>
                            <a class="btn btn-link" href="@Url.Action("Index", new { page = ViewBag.MaxPage, searchTerm = ViewContext.HttpContext.Request.Query["searchTerm"] })">@ViewBag.MaxPage</a>
                        }
                        else if (ViewBag.Page > ViewBag.MaxPage - 3)
                        {
                            <a class="btn btn-link" href="@Url.Action("Index", new { page = 1, searchTerm = ViewContext.HttpContext.Request.Query["searchTerm"] })">1</a>
                            <span>...</span>
                            for (int i = ViewBag.MaxPage - 6; i <= ViewBag.MaxPage; i++)
                            {
                                <a class="btn btn-link @((ViewBag.Page == i) ? "active" : "")" href="@Url.Action("Index", new { page = i })">@i</a>
                            }
                        }
                        else
                        {
                            <a class="btn btn-link" href="@Url.Action("Index", new { page = 1, searchTerm = ViewContext.HttpContext.Request.Query["searchTerm"] })">1</a>
                            <span>...</span>
                            for (int i = ViewBag.Page - 2; i <= ViewBag.Page + 2; i++)
                            {
                                <a class="btn btn-link @((ViewBag.Page == i) ? "active" : "")" href="@Url.Action("Index", new { page = i })">@i</a>
                            }
                            <span>...</span>
                            <a class="btn btn-link" href="@Url.Action("Index", new { page = ViewBag.MaxPage, searchTerm = ViewContext.HttpContext.Request.Query["searchTerm"] })">@ViewBag.MaxPage</a>
                        }
                    }

                    @if (ViewBag.Page < ViewBag.MaxPage)
                    {
                        <a class="btn btn-link" href="@Url.Action("Index", new { page = ViewBag.Page + 1, searchTerm = ViewContext.HttpContext.Request.Query["searchTerm"] })">Siguiente</a>
                    }
                    <div class="input-group mt-3" style="max-width: 200px;">
                        <input type="number" class="form-control" id="goToPageInput" min="1" max="@ViewBag.MaxPage" placeholder="Ir a página">
                        <button class="btn btn-primary" onclick="goToPage()">Ir</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="details"></div>

}
else
{
    <div>
        <div class="table-responsive mx-n1 px-1Latest">
            <table class="table table-striped fs--1 mb-0 border-top border-200">
                <thead>
                    <tr>
                        <th class="white-space-nowrap fs--1 ps-0 align-middle text-center col-1 pt-2 pb-2 pl-2"></th>
                        <th class="sort align-middle ps-3 white-space-nowrap fs--1 ps-0  text-center col-2 p-0" data-sort="@Html.DisplayNameFor(model => model.CodGrupo))">Cod.Grupo</th>
                        <th class="sort align-middle ps-3 white-space-nowrap fs--1 ps-0  text-center col-2 p-0" data-sort="@Html.DisplayNameFor(model => model.CodModulo))">Cod.Módulo</th>
                        <th class="sort align-middle ps-3 white-space-nowrap fs--1 ps-0  text-center col-3 p-0" data-sort="@Html.DisplayNameFor(model => model.NomForma))">Forma</th>
                        <th class="sort align-middle ps-3 white-space-nowrap fs--1 ps-0  text-center col-4 p-0" data-sort="@Html.DisplayNameFor(model => model.NomForma))">Descripción</th>
                    </tr>
                </thead>
                <tbody class="list">
                    @foreach (var item in Model)
                    {
                        <tr class="hover-actions-trigger btn-reveal-trigger position-static">
                            <td class="fs--1 align-middle ps-0 text-center col-1 pt-2 pb-2 pl-2">
                                <button class="btnAbm" onclick="modaledit('@item.CodGrupo', '@item.CodModulo', '@item.NomForma')"><i class="fa fa-pencil"></i></button>
                                <button class="btnAbm" onclick="modaldelete('@item.CodGrupo', '@item.CodModulo', '@item.NomForma')"><i class="fa fa-trash"></i></button>
                            </td>
                            <td class="@Html.DisplayNameFor(modelItem => item.CodGrupo) fs--1 align-middle ps-0 text-left col-2 pt-2 pb-2 ps-2"> @Html.DisplayFor(modelItem => item.CodGrupo)</td>
                            <td class="@Html.DisplayNameFor(modelItem => item.CodModulo) fs--1 align-middle ps-0 text-left col-2 pt-2 pb-2 ps-2"> @Html.DisplayFor(modelItem => item.CodModulo)</td>
                            <td class="@Html.DisplayNameFor(modelItem => item.NomForma) fs--1 align-middle ps-0 text-left col-3 pt-2 pb-2 ps-2"> @Html.DisplayFor(modelItem => item.NomForma)</td>
                            <td class="@Html.DisplayNameFor(modelItem => item.NomForma) fs--1 align-middle ps-0 text-left col-4 pt-2 pb-2 ps-2"> @Html.DisplayFor(modelItem => item.Descripcion)</td>

                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}



<script>
    function goToPage() {
        const inputElement = document.getElementById('goToPageInput');
        const pageNumber = parseInt(inputElement.value);

        if (!isNaN(pageNumber) && pageNumber >= 1 && pageNumber <= @ViewBag.MaxPage) {
            window.location.href = '@Url.Action("Index")' + `?page=${pageNumber}`;
        }
    }
    const exportDocument = () => {
        document.getElementById('dowload-button').disabled = true;
        document.getElementById('dowload-button').innerHTML = 'Descargando...';
        // Obtener el número de página actual
        const currentPage = @ViewBag.Page;
        // Obtener el término de búsqueda actual
        const currentSearchTerm = document.getElementById('searchInput').value;
        axios({
            method: "get",
            url: `AccesosGrupo?page=${currentPage}&searchTerm=${encodeURIComponent(currentSearchTerm)}`,
            headers: {
                "ExportMode": "PDF",
            }
        })
            .then(function (response) {
                const date = new Date();
                const linkSource = `data:application/pdf;base64,${response.data}`;
                const downloadLink = document.createElement("a");
                const fileName = `reporte-accesosgrupos-${date.getDate()}-${date.getMonth() + 1}-${date.getFullYear()}.pdf`;
                downloadLink.href = linkSource;
                downloadLink.download = fileName;
                downloadLink.click();
                document.getElementById('dowload-button').disabled = false;
                document.getElementById('dowload-button').innerHTML = `
                                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-file-earmark-pdf" viewBox="0 0 16 16">
                                                                <path d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5v2z"/>
                                                                <path d="M4.603 14.087a.81.81 0 0 1-.438-.42c-.195-.388-.13-.776.08-1.102.198-.307.526-.568.897-.787a7.68 7.68 0 0 1 1.482-.645 19.697 19.697 0 0 0 1.062-2.227 7.269 7.269 0 0 1-.43-1.295c-.086-.4-.119-.796-.046-1.136.075-.354.274-.672.65-.823.192-.077.4-.12.602-.077a.7.7 0 0 1 .477.365c.088.164.12.356.127.538.007.188-.012.396-.047.614-.084.51-.27 1.134-.52 1.794a10.954 10.954 0 0 0 .98 1.686 5.753 5.753 0 0 1 1.334.05c.364.066.734.195.96.465.12.144.193.32.2.518.007.192-.047.382-.138.563a1.04 1.04 0 0 1-.354.416.856.856 0 0 1-.51.138c-.331-.014-.654-.196-.933-.417a5.712 5.712 0 0 1-.911-.95 11.651 11.651 0 0 0-1.997.406 11.307 11.307 0 0 1-1.02 1.51c-.292.35-.609.656-.927.787a.793.793 0 0 1-.58.029zm1.379-1.901c-.166.076-.32.156-.459.238-.328.194-.541.383-.647.547-.094.145-.096.25-.04.361.01.022.02.036.026.044a.266.266 0 0 0 .035-.012c.137-.056.355-.235.635-.572a8.18 8.18 0 0 0 .45-.606zm1.64-1.33a12.71 12.71 0 0 1 1.01-.193 11.744 11.744 0 0 1-.51-.858 20.801 20.801 0 0 1-.5 1.05zm2.446.45c.15.163.296.3.435.41.24.19.407.253.498.256a.107.107 0 0 0 .07-.015.307.307 0 0 0 .094-.125.436.436 0 0 0 .059-.2.095.095 0 0 0-.026-.063c-.052-.062-.2-.152-.518-.209a3.876 3.876 0 0 0-.612-.053zM8.078 7.8a6.7 6.7 0 0 0 .2-.828c.031-.188.043-.343.038-.465a.613.613 0 0 0-.032-.198.517.517 0 0 0-.145.04c-.087.035-.158.106-.196.283-.04.192-.03.469.046.822.024.111.054.227.09.346z"/>
                                                            </svg>
                                                            Exportar
                                                    `;
            })
            .catch(function (response) {
                console.log(response);
            });

    };
    const searchInput = document.getElementById('searchInput');
    searchInput.addEventListener('input', function () {
        const searchTerm = searchInput.value;
        performSearch(searchTerm);
    });

    const performSearch = (searchTerm) => {
        currentSearchTerm = searchTerm;
        axios.get(`@Url.Action("Index", "AccesosGrupo")?searchTerm=${encodeURIComponent(searchTerm)}`)
            .then(response => {
                //document.getElementById("listbody").innerHTML = response.data;
                // Puede que necesites reinicializar algunos scripts aquí si es necesario
                const tempElement = document.createElement('div');
                tempElement.innerHTML = response.data;

                // Obtener solo la parte relevante (en este caso, la tabla)
                const newTable = tempElement.querySelector('#listbody table');

                // Reemplazar el contenido actual de listbody con la nueva tabla
                const listbody = document.getElementById('listbody');
                listbody.innerHTML = '';
                listbody.appendChild(newTable);
            })
            .catch(error => {
                console.error(error);
            });
    };

    const editsubmit = (CodGrupo, CodModulo, NomForma) => {
        e.preventDefault();
        const form = document.getElementById("AccesosGrupo" + "FormEdit");
        const formData = new FormData(form);
        axios({
            method: "post",
            url: "AccesosGrupo" + "" + `/Edit`,
            data: formData,
            headers: {
                "Content-Type": "multipart/form-data",
                'X-Response-View': 'Json'
            }
        })
            .then(function (response) {
                document.getElementById("listbody").innerHTML = response.data;
                document.getElementById("editmodal").click();
            })
            .catch(function (response) {
                console.log(response);
            });
    };
    const modalcreate = () => {
        axios({
            baseURL: "AccesosGrupo" + "" + "/Create",
            method: 'Get',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'X-Response-View': 'Json'
            }
        }).then(response => {
            document.getElementById("details").innerHTML = response.data;
            document.getElementById("detailsview").click();
        });
    };
    const modaledit = (CodGrupo, CodModulo, NomForma) => {
        axios({
            baseURL: "AccesosGrupo" + "" + "/Edit?" + `CodGrupo=${CodGrupo}&CodModulo=${CodModulo}&NomForma=${NomForma}`,
            method: 'Get',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'X-Response-View': 'Json'
            }
        }).then(response => {
            document.getElementById("details").innerHTML = response.data;
            document.getElementById("detailsview").click();
        });
    };
    const modaldetails = (CodGrupo, CodModulo, NomForma) => {
        axios({
            baseURL: "AccesosGrupo" + "" + "/Details?" + `CodGrupo=${CodGrupo}&CodModulo=${CodModulo}&NomForma=${NomForma}`,
            method: 'Get',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'X-Response-View': 'Json'
            }
        }).then(response => {
            document.getElementById("details").innerHTML = response.data;
            document.getElementById("detailsview").click();
        });
    };
    const modaldelete = (CodGrupo, CodModulo, NomForma) => {
        axios({
            baseURL: "AccesosGrupo" + "" + "/Delete?" + `CodGrupo=${CodGrupo}&CodModulo=${CodModulo}&NomForma=${NomForma}`,
            method: 'Get',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'X-Response-View': 'Json'
            }
        }).then(response => {
            document.getElementById("details").innerHTML = response.data;
            document.getElementById("detailsview").click();
        });
    };
    const submitforms = (e, url, id) => {
        e.preventDefault();
        document.getElementById("loader_inv").style.visibility = "visible";
        const form = document.getElementById(id);
        const formData = new FormData(form);
        axios({
            method: "post",
            url: "AccesosGrupo" + "/" + `${url}`,
            data: formData,
            headers: {
                "Content-Type": "multipart/form-data",
                'X-Response-View': 'Json'
            }
        })
            .then(function (response) {
                if (response.data.success == false) {
                    swal({
                        icon: 'error',
                        title: 'Error...',
                        text: response.data.message
                    });
                    //loader.style.display = 'none';
                }else{
                    document.getElementById("listbody").innerHTML = response.data;
                    document.getElementById("editmodal").click();
                    document.getElementsByClassName("modal-backdrop fade show")[0].className = "";
                    swal({
                        icon: 'success',
                        title: 'Listo',
                        text: 'La operación se realizó correctamente.'
                    });
                }
                
            })
            .catch(function (response) {
                console.log(response);
            }).finally(() => {
                document.getElementById("loader_inv").style.visibility = "hidden";
                refrestjsfunction();
            });
    };
    const verifyCheckbox = (id) => {
        var checkBox = document.getElementById(id + "_2");
        var text = document.getElementById(id);
        if (checkBox.checked == true) {
            text.value = "S";
        } else {
            text.value = "N";
        }
    }
    const refrestjsfunction = () => {
        const refreshjs = document.querySelectorAll("script");
        refreshjs.forEach((item) => {
            var src = item.src;
            item.remove();
            var script,
                scriptTag;
            script = document.createElement('script');
            script.type = 'text/javascript';
            script.src = src;
            scriptTag = document.getElementsByTagName('script')[0];
            scriptTag.parentNode.insertBefore(script, scriptTag);
        })
    }</script>